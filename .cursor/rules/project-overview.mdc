---
description: Core project architecture, patterns, and conventions for the AI Documentation Generator
globs:
  - "**/*"
alwaysApply: true
---

# AI Documentation Generator - Project Overview

## Project Identity

**Name**: ai-doc-gen  
**Version**: 1.2.0  
**Python**: 3.13 (strict requirement)  
**Architecture**: Multi-agent CLI application with async/await patterns

## Core Architecture

This is a **multi-agent AI system** that analyzes codebases and generates documentation using specialized AI agents:

### Handler-Agent Pattern
- **Handlers** (`src/handlers/`) orchestrate workflows and manage configuration
- **Agents** (`src/agents/`) execute AI-powered analysis using pydantic-ai
- **Tools** (`src/agents/tools/`) provide file system access to agents

### Key Components

1. **Entry Point**: `src/main.py`
   - Dynamic CLI argument generation from Pydantic models via reflection
   - Command routing: `analyze`, `generate readme`, `generate ai-rules`, `cronjob analyze`
   - Observability setup with Langfuse/OpenTelemetry

2. **Configuration System**: `src/config.py`
   - Multi-source loading: environment variables → YAML files → CLI arguments
   - Hierarchical merging with explicit precedence
   - All config validated through Pydantic models

3. **Agent System**:
   - **AnalyzerAgent**: Runs 5 concurrent specialized agents (structure, dependencies, data flow, request flow, API)
   - **DocumenterAgent**: Generates README from analysis results
   - **AIRulesAgent**: Generates AI assistant configuration files

4. **Handler System**:
   - **AnalyzeHandler**: Orchestrates code analysis
   - **ReadmeHandler**: Manages README generation
   - **AIRulesHandler**: Manages AI rules generation
   - **JobAnalyzeHandler**: Automates GitLab project analysis with MR creation

## Critical Patterns

### 1. Configuration Hierarchy
```python
# Precedence: Pydantic defaults < YAML file < CLI args
config = load_config(args, HandlerConfig, file_key="section.subsection")
```

### 2. Concurrent Agent Execution
```python
# Error isolation - individual failures don't stop others
results = await asyncio.gather(*tasks, return_exceptions=True)
```

### 3. Pydantic Model Validation
- All configuration uses Pydantic BaseModel with Field descriptors
- Custom validators with `@model_validator(mode="after")`
- Path validation and auto-resolution in BaseHandlerConfig

### 4. Tool-Based Agent Pattern
```python
agent = Agent(
    name="Structure Analyzer",
    model=model,
    tools=[FileReadTool().get_tool(), ListFilesTool().get_tool()]
)
```

### 5. Retry Logic
- **Agent-level**: 2 retries via pydantic-ai (configurable)
- **HTTP-level**: 5 attempts with exponential backoff (1s → 60s max)
- **Tool-level**: 2 retries with ModelRetry exceptions

## File Organization

```
src/
├── main.py                    # CLI entry point
├── config.py                  # Configuration management
├── handlers/                  # Command handlers
│   ├── base_handler.py       # Abstract base with config validation
│   ├── analyze.py            # Analysis orchestration
│   ├── readme.py             # README generation
│   ├── ai_rules.py           # AI rules generation
│   └── cronjob.py            # GitLab automation
├── agents/                    # AI agents
│   ├── analyzer.py           # Multi-agent analyzer
│   ├── documenter.py         # README generator
│   ├── ai_rules.py           # AI rules generator
│   ├── prompts/              # YAML prompt templates
│   └── tools/                # Agent tools
│       ├── file_tool/        # File reading
│       └── dir_tool/         # Directory listing
└── utils/                     # Shared utilities
    ├── logger.py             # Structured logging
    ├── prompt_manager.py     # Jinja2 template rendering
    ├── retry_client.py       # HTTP retry logic
    ├── repo.py               # Git utilities
    └── custom_models/        # Custom LLM providers
```

## Key Dependencies

- **pydantic-ai==1.0.15**: Core AI agent framework (CRITICAL)
- **pydantic==2.12.0**: Data validation and settings
- **logfire==4.12.0**: Observability and tracing
- **python-gitlab==6.2.0**: GitLab API integration
- **gitpython==3.1.45**: Git operations
- **jinja2==3.1.6**: Prompt template rendering

## Environment Configuration

All sensitive data in environment variables:
- `ANALYZER_LLM_MODEL`, `ANALYZER_LLM_API_KEY`, `ANALYZER_LLM_BASE_URL`
- `DOCUMENTER_LLM_MODEL`, `DOCUMENTER_LLM_API_KEY`, `DOCUMENTER_LLM_BASE_URL`
- `AI_RULES_LLM_MODEL`, `AI_RULES_LLM_API_KEY`, `AI_RULES_LLM_BASE_URL`
- `GITLAB_OAUTH_TOKEN`, `GITLAB_API_URL`
- `LANGFUSE_PUBLIC_KEY`, `LANGFUSE_SECRET_KEY` (optional)

## Output Locations

- Analysis files: `{repo_path}/.ai/docs/*.md`
- README: `{repo_path}/README.md`
- AI Rules: `{repo_path}/CLAUDE.md`, `{repo_path}/AGENTS.md`, `{repo_path}/.cursor/rules/*.mdc`
- Logs: `.logs/{repo_name}/{YYYY_MM_DD}/{timestamp}.log`
- Config: `{repo_path}/.ai/config.yaml`